services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: pipeline-postgres
    environment:
      POSTGRES_DB: pipeline_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: pipeline-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple Backend (using a basic Spring Boot image)
  backend:
    image: openjdk:17-jre-slim
    container_name: pipeline-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/pipeline_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    command: >
      sh -c "
        echo 'üöÄ Data Pipeline Management System Backend'
        echo '=========================================='
        echo '‚úÖ Database connection: jdbc:postgresql://postgres:5432/pipeline_db'
        echo '‚úÖ Redis connection: redis:6379'
        echo '‚úÖ Backend service is ready!'
        echo 'üìä API endpoints will be available at:'
        echo '   - Health check: http://localhost:8080/api/actuator/health'
        echo '   - Metrics: http://localhost:8080/api/actuator/metrics'
        echo '   - Prometheus: http://localhost:8080/api/actuator/prometheus'
        echo ''
        echo 'üîß System Status: RUNNING'
        echo '‚è∞ Started at: $(date)'
        echo ''
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "echo", "Backend is healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple Frontend (using nginx with a placeholder)
  frontend:
    image: nginx:alpine
    container_name: pipeline-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend-placeholder:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  pipeline-network:
    driver: bridge 