version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: pipeline-postgres
    environment:
      POSTGRES_DB: pipeline_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: pipeline-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pipeline-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: pipeline-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - pipeline-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple Backend (using a basic Spring Boot image)
  backend:
    image: openjdk:17-jre-slim
    container_name: pipeline-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/pipeline_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipeline-network
    command: >
      sh -c "
        echo 'Backend service placeholder - Spring Boot app would run here'
        echo 'Database connection: jdbc:postgresql://postgres:5432/pipeline_db'
        echo 'Redis connection: redis:6379'
        echo 'Prometheus endpoint: http://prometheus:9090'
        echo 'Grafana endpoint: http://grafana:3000'
        echo 'Backend is ready!'
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "echo", "Backend is healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simple Frontend (using nginx with a placeholder)
  frontend:
    image: nginx:alpine
    container_name: pipeline-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend-placeholder:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pipeline-network:
    driver: bridge 